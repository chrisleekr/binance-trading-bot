
Authentication
Market data
getL2OrderBook
getL3OrderBook
getTickers
getTickerBySymbol
getSymbols
getSymbolByName
Trading
Payments
Schemas
Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.

Introduction
Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades.

To get started
Create or log into your existing Blockchain.com Exchange account
Select API from the drop down menu
Fill out form and click “Create New API Key Now”
Once generated you can view your keys under API Settings. Please be aware that the API key can only be used once it was verified via email.

The API key must be set via the X-API-Token header.

The base URL to be used for all calls is https://api.blockchain.com/v3/exchange

Autogenerated clients for this API can be found here.

Base URLs:

https://api.blockchain.com/v3/exchange
Authentication
API Key (ApiKeyAuth)
Parameter Name: X-API-Token, in: header.
Market data
Retrieve current prices and markets

getL2OrderBook

Code samples

URL obj = new URL("https://api.blockchain.com/v3/exchange/l2/{symbol}");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

GET /l2/{symbol}

L2 Order Book

Level 2 Order Book data is available through the l2 channel. Each entry in bids and asks arrays is a price level, along with its price (px), quantity (qty) and number of orders (num) attributes.

Parameters
Name	In	Type	Required	Description
symbol	path	symbol	true	Symbol
Example responses

200 Response

{
  "symbol": "BTC-USD",
  "bids": [
    {
      "px": "8723.45",
      "qty": "1.45",
      "num": "1"
    }
  ],
  "asks": [
    {
      "px": "8723.45",
      "qty": "1.45",
      "num": "1"
    }
  ]
}
Responses
Status	Meaning	Description	Schema
200	OK	Success	OrderBook
getL3OrderBook

Code samples

URL obj = new URL("https://api.blockchain.com/v3/exchange/l3/{symbol}");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

GET /l3/{symbol}

L3 Order Book

Level 3 Order Book data is available through the l3 channel. Each entry in bids and asks arrays is an order, along with its id (id), price (px) and quantity (qty) attributes. In contrast to the L2 order book, the L3 order book contains all individual orders without aggregation.

Parameters
Name	In	Type	Required	Description
symbol	path	symbol	true	Symbol
Example responses

200 Response

{
  "symbol": "BTC-USD",
  "bids": [
    {
      "px": "8723.45",
      "qty": "1.45",
      "num": "1"
    }
  ],
  "asks": [
    {
      "px": "8723.45",
      "qty": "1.45",
      "num": "1"
    }
  ]
}
Responses
Status	Meaning	Description	Schema
200	OK	Success	OrderBook
getTickers

Code samples

URL obj = new URL("https://api.blockchain.com/v3/exchange/tickers");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

GET /tickers

Price

Example responses

200 Response

[
  {
    "symbol": "BTC-USD",
    "price_24h": "4998.0",
    "volume_24h": "0.3015",
    "last_trade_price": "5000.0"
  }
]
Responses
Status	Meaning	Description	Schema
200	OK	Success	Inline
Response Schema
Status Code 200

Name	Type	Required	Restrictions	Description
anonymous	[PriceEvent]	false	none	none
» symbol	symbol	false	none	Blockchain symbol identifier
» price_24h	number(double)	false	none	none
» volume_24h	number(double)	false	none	none
» last_trade_price	number(double)	false	none	none
getTickerBySymbol

Code samples

URL obj = new URL("https://api.blockchain.com/v3/exchange/tickers/{symbol}");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

GET /tickers/{symbol}

Price

Parameters
Name	In	Type	Required	Description
symbol	path	symbol	true	Symbol
Example responses

200 Response

{
  "symbol": "BTC-USD",
  "price_24h": "4998.0",
  "volume_24h": "0.3015",
  "last_trade_price": "5000.0"
}
Responses
Status	Meaning	Description	Schema
200	OK	Success	PriceEvent
getSymbols

Code samples

URL obj = new URL("https://api.blockchain.com/v3/exchange/symbols");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

GET /symbols

Symbols

When the symbol is not halted the auction data in the message may be blank. When a symbol is in a halt state the auction data will populate as the book builds. When an opening time has been chosen, the auction-time field will show the opening time. Subsequent updates will be sent only if the symbol status changes in any way.

Example responses

200 Response

{
  "property1": {
    "base_currency": "BTC-USD",
    "base_currency_scale": 8,
    "counter_currency": "BTC-USD",
    "counter_currency_scale": 2,
    "min_price_increment": 10,
    "min_price_increment_scale": 0,
    "min_order_size": 10,
    "min_order_size_scale": 2,
    "max_order_size": 0,
    "max_order_size_scale": 8,
    "lot_size": 5,
    "lot_size_scale": 2,
    "status": "open",
    "id": 1,
    "auction_price": 0,
    "auction_size": 0,
    "auction_time": "1530",
    "imbalance": 0
  },
  "property2": {
    "base_currency": "BTC-USD",
    "base_currency_scale": 8,
    "counter_currency": "BTC-USD",
    "counter_currency_scale": 2,
    "min_price_increment": 10,
    "min_price_increment_scale": 0,
    "min_order_size": 10,
    "min_order_size_scale": 2,
    "max_order_size": 0,
    "max_order_size_scale": 8,
    "lot_size": 5,
    "lot_size_scale": 2,
    "status": "open",
    "id": 1,
    "auction_price": 0,
    "auction_size": 0,
    "auction_time": "1530",
    "imbalance": 0
  }
}
Responses
Status	Meaning	Description	Schema
200	OK	Success	Inline
Response Schema
Status Code 200

Name	Type	Required	Restrictions	Description
» additionalProperties	SymbolStatus	false	none	none
»» base_currency	symbol	false	none	Blockchain symbol identifier
»» base_currency_scale	integer	false	none	The number of decimals the currency can be split in
»» counter_currency	symbol	false	none	Blockchain symbol identifier
»» counter_currency_scale	integer	false	none	The number of decimals the currency can be split in
»» min_price_increment	integer(int64)	false	none	The price of the instrument must be a multiple of min_price_increment * (10^-min_price_increment_scale)
»» min_price_increment_scale	integer	false	none	none
»» min_order_size	integer(int64)	false	none	The minimum quantity for an order for this instrument must be min_order_size*(10^-min_order_size_scale)
»» min_order_size_scale	integer	false	none	none
»» max_order_size	integer(int64)	false	none	The
